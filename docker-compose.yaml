services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.7.0'
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - kafka-network
  
  kafka:
    image: 'confluentinc/cp-kafka:7.7.0'
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - '9092:9092'
      - '19092:19092'
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: 'provectuslabs/kafka-ui:v0.7.2'
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - kafka-network

  bc_postgres:
    image: postgres:latest
    container_name: bc-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: bc-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d bc-postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - kafka-network
    restart: unless-stopped
    depends_on:
      - bc_postgres

  kafka-setup:
    image: confluentinc/cp-kafka:7.7.0
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network
    command: >
      bash -c "
      echo 'Waiting for Kafka to be ready...';
      cub kafka-ready -b kafka:9092 1 30;
      echo 'Creating topics...';
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic bot_game --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic bot_db --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic game_bot --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic db_bot --partitions 3 --replication-factor 1;
      echo 'Topics created successfully';
      exit 0;
      "
    restart: on-failure

  bc-server:
    build:
      context: ../engine
      dockerfile: Dockerfile
    image: bc-server:latest
    container_name: bc-server
    env_file:
      - .env
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      bc_postgres:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    ports:
      - "8081:8081"  # Пример порта, замените на нужный
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: bc_postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: bc-postgres

  kafka-consumer-go:
    build:
      context: ../database-consumer
      dockerfile: Dockerfile
    image: database-consumer:latest
    env_file:
      - .env
    depends_on:
      - bc-server
      - kafka
      - bc_postgres
    networks:
      - kafka-network
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: bc_postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: bc-postgres

  tg-bot:
    build:
      context: tg-bot
      dockerfile: Dockerfile
    image: tg-bot:latest
    env_file:
      - tg-bot/.env
    container_name: tg-bot
    depends_on:
      - bc-server
      - kafka
      - bc_postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: bc_postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: bc-postgres
    restart: unless-stopped
    networks:
      - kafka-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  kafka-network:
    driver: bridge