services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.7.0'
    hostname: zookeeper
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - kafka-network
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_log:/var/lib/zookeeper/log
  
  kafka:
    image: 'confluentinc/cp-kafka:7.7.0'
    hostname: kafka
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_CFG_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      KAFKA_CFG_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
    ports:
      - '9092:9092'
      - '19092:19092'
    networks:
      - kafka-network
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - kafka-network
  bc-postgres:
    image: postgres:latest
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    secrets:
      - postgres_user
      - postgres_password
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: bc-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kafka-network


  pgadmin:
    image: dpage/pgadmin4:latest
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    secrets:
      - admin_email
      - postgres_password
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@email.com"
      PGADMIN_DEFAULT_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - kafka-network
    depends_on:
      - bc-postgres

  kafka-setup:
    image: confluentinc/cp-kafka:7.7.0
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - kafka
    networks:
      - kafka-network
    command: >
      bash -c "
      echo 'Waiting for Kafka to be ready...';
      cub kafka-ready -b kafka:9092 1 60;
      sleep 10;
      echo 'Creating Kafka topics...';
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic bot_game --partitions 3 --replication-factor 1 2>/dev/null && echo '✓ bot_game' || exit 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic bot_db --partitions 3 --replication-factor 1 2>/dev/null && echo '✓ bot_db' || exit 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic game_bot --partitions 3 --replication-factor 1 2>/dev/null && echo '✓ game_bot' || exit 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic db_bot --partitions 3 --replication-factor 1 2>/dev/null && echo '✓ db_bot' || exit 1;
      echo 'Topics created successfully';
      exit 0;
      "

  bc-server:
    image: bc-server:latest
    depends_on:
      - kafka
      - bc-postgres
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    networks:
      - kafka-network
    ports:
      - "8081:8081"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC_FROM_SERVER_TO_BOT: game_bot
      KAFKA_TOPIC_FROM_BOT_TO_SERVER: bot_game
      KAFKA_SERVER_GROUP_ID: server_group

  db-controller-go:
    image: db-controller:latest
    depends_on:
      - bc-server
      - kafka
      - bc-postgres
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    networks:
      - kafka-network
    secrets:
      - postgres_user
      - postgres_password
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: bc-postgres
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: bc-postgres
      POSTGRES_PORT: 5432

  tg-bot:
    image: tg-bot:latest
    depends_on:
      - kafka
      - bc-server
      - bc-postgres
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 20
        window: 120s
    secrets:
      - postgres_user
      - postgres_password
      - tg_bot_token
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: bc-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: bc-postgres
      TG_API_BC_TOKEN_FILE: /run/secrets/tg_bot_token
      TOPIC_DB_LISTEN: db_bot
      TOPIC_DB_SEND: bot_db
      TOPIC_GAME_LISTEN: game_bot
      TOPIC_GAME_SEND: bot_game
    networks:
      - kafka-network  
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f python.*run.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    command: >
      sh -c "
      echo 'Waiting for Kafka...';
      while ! nc -z kafka 9092; do sleep 2; done;
      echo 'Waiting for PostgreSQL...';
      while ! nc -z bc-postgres 5432; do sleep 2; done;
      echo 'Services are ready, starting application...';
      python ./run.py
      "

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  zk_data:
    driver: local
  zk_log:
    driver: local
  kafka_data:
    driver: local

networks:
  kafka-network:
    driver: overlay

secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
  admin_email:
    external: true
  tg_bot_token:
    external: true